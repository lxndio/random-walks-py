from enum import Enum

class WalkerError(Enum):
    WRONG_DYNAMIC_PROGRAM_TYPE = 1
    NO_PATH_EXISTS = 2,
    INCONSISTENT_PATH = 3,
    RANDOM_DISTRIBUTION_ERROR = 4

class StandardWalker:
    def __new__(cls) -> 'StandardWalker': ...
    def generate_path(self, dp: 'SimpleDynamicProgram', to_x: int, to_y: int,
                      time_steps: int) -> 'Walk': ...
    def generate_paths(self, dp: 'SimpleDynamicProgram', qty: int,
                       to_x: int, to_y: int, time_steps: int) -> list['Walk']: ...
    def name(self, short: bool) -> str: ...

class CorrelatedWalker:
    def __new__(cls) -> 'CorrelatedWalker': ...
    def generate_path(self, dp: 'MultiDynamicProgram', to_x: int, to_y: int,
                      time_steps: int) -> 'Walk': ...
    def generate_paths(self, dp: 'MultiDynamicProgram', qty: int,
                       to_x: int, to_y: int, time_steps: int) -> list['Walk']: ...
    def name(self, short: bool) -> str: ...

class MultiStepWalker:
    def __new__(cls, max_step_size: int) -> 'MultiStepWalker': ...
    def generate_path(self, dp: 'SimpleDynamicProgram', to_x: int, to_y: int,
                      time_steps: int) -> 'Walk': ...
    def generate_paths(self, dp: 'SimpleDynamicProgram', qty: int,
                       to_x: int, to_y: int, time_steps: int) -> list['Walk']: ...
    def name(self, short: bool) -> str: ...

class LevyWalker:
    def __new__(cls, jump_probability: float, jump_distance: int) -> 'LevyWalker': ...
    def generate_path(self, dp: 'SimpleDynamicProgram', to_x: int, to_y: int,
                      time_steps: int) -> 'Walk': ...
    def generate_paths(self, dp: 'SimpleDynamicProgram', qty: int,
                       to_x: int, to_y: int, time_steps: int) -> list['Walk']: ...
    def name(self, short: bool) -> str: ...
