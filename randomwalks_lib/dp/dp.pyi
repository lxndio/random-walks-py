class SimpleDynamicProgram:
    """
    A simple dynamic program.
    """

    def __new__(cls, time_limit: int, kernel: 'Kernel', field_probabilities: list[list[float]]=[]) -> 'SimpleDynamicProgram': ...
    def at(self, x: int, y: int, t: int) -> float: ...
    def at_or(self, x: int, y: int, t: int, default: float) -> float:
    def set(self, x: int, y: int, t: int, val: float): ...
    @staticmethod
    def load(filename: str) -> 'SimpleDynamicProgram': ...
    def limits(self) -> tuple[int, int]: ...
    def compute(self): ...
    def field_probabilities(self) -> list[list[float]]: ...
    def heatmap(self, path: str, t: int): ...
    def print(self, t: int): ...
    def save(self, filename: str): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...

class MultiDynamicProgram:
    def __new__(cls, time_limit: int, kernels: list['Kernel'], field_probabilities: list[list[float]]=[]) -> 'MultiDynamicProgram': ...
    def at(self, x: int, y: int, t: int, variant: int) -> float: ...
    def set(self, x: int, y: int, t: int, variant: int, val: float): ...
    def variants(self) -> int: ...
    @staticmethod
    def load(filename: str) -> 'MultiDynamicProgram': ...
    def limits(self) -> tuple[int, int]: ...
    def compute(self): ...
    def field_probabilities(self) -> list[list[float]]: ...
    def heatmap(self, path: str, t: int): ...
    def print(self, t: int): ...
    def save(self, filename: str): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
