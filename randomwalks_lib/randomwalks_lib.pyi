import typing as t
from enum import Enum

class Kernel:
    def __new__(cls, size: int = 3, short_name: str = "", long_name: str = "") -> 'Kernel': ...
    @staticmethod
    def simple_rw() -> 'Kernel': ...
    @staticmethod
    def biased_rw(probability: float, direction: 'Direction') -> 'Kernel': ...
    @staticmethod
    def correlated_rw(persistence: float) -> list['Kernel']: ...
    @staticmethod
    def biased_correlated_rw(probability: float, direction: 'Direction', persistence: float) -> list['Kernel']: ...
    def size(self) -> int: ...
    def set(self, x: int, y: int, val: float): ...
    def at(self, x: int, y: int) -> float: ...
    def rotate(self, degrees: int): ...
    def name(self, short: bool) -> str: ...

class Direction(Enum):
    NORTH = 1
    EAST = 2
    SOUTH = 3
    WEST = 4
    STAY = 5

class Walk:
    def len(self) -> int: ...
    def is_empty(self) -> bool: ...
    def __iter__(self) -> t.Iterable['Walk']: ...
    def frechet_distance(self, other: 'Walk') -> float: ...
    def directness_deviation(self) -> float: ...
    def translate(self, by: 'XYPoint') -> 'Walk': ...
    def scale(self, by: 'XYPoint') -> 'Walk': ...
    def rotate(self, degrees: float) -> 'Walk': ...
    def plot(self, filename: str): ...
    @staticmethod
    def plot_multiple(walks: list['Walk'], filename: str): ...
    def __repr__(self) -> str: ...
