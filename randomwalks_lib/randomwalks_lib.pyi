class Kernel:
    def simple_rw(self) -> 'Kernel': ...
    def biased_rw(self, probability: float, direction: 'Direction') -> 'Kernel': ...
    def correlated_rw(self, persistence: float) -> list['Kernel']: ...
    def biased_correlated_rw(self, probability: float, direction: 'Direction', persistence: float) -> list['Kernel']: ...

class Walk:
    def len(self) -> int: ...
    def is_empty(self) -> bool: ...
    def frechet_distance(self, other: 'Walk') -> float: ...
    def directness_deviation(self) -> float: ...

class Direction: ...
