class dp:
    class SimpleDynamicProgram:
        def __new__(cls, time_limit: int, kernel: 'Kernel', field_probabilities: list[list[float]]=[]) -> 'SimpleDynamicProgram': ...
        def at(self, x: int, y: int, t: int): ...
        def set(self, x: int, y: int, t: int, val: float): ...

        @staticmethod
        def load(filename: str) -> 'SimpleDynamicProgram': ...

        def limits(self) -> tuple[int, int]: ...
        def compute(self): ...
        def field_probabilities(self) -> list[list[float]]: ...
        def heatmap(self, path: str, t: int): ...
        def print(self, t: int): ...
        def save(self, filename: str): ...
        def __repr__(self) -> str: ...
        def __eq__(self, other) -> bool: ...


class Kernel:
    def simple_rw(self) -> 'Kernel': ...
    def biased_rw(self, probability: float, direction: 'Direction') -> 'Kernel': ...
    def correlated_rw(self, persistence: float) -> list['Kernel']: ...
    def biased_correlated_rw(self, probability: float, direction: 'Direction', persistence: float) -> list['Kernel']: ...

class Direction: ...
